import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# C·∫•u h√¨nh trang
st.set_page_config(page_title="Supermarket Sales Forecast", layout="wide")

# Ti√™u ƒë·ªÅ
st.title("üõí D·ª± b√°o doanh s·ªë si√™u th·ªã & Tr·ª±c quan h√≥a d·ªØ li·ªáu")

# ƒê·ªçc d·ªØ li·ªáu
@st.cache_data
def load_data():
    df = pd.read_csv("supermarket_sales_forecast_sample.csv")
    return df

df = load_data()

# ===========================
# üìä Tr·ª±c quan h√≥a d·ªØ li·ªáu
# ===========================
st.header("üìä Tr·ª±c quan h√≥a d·ªØ li·ªáu")

# 1. Ph√¢n ph·ªëi doanh s·ªë
st.subheader("1. Ph√¢n ph·ªëi doanh s·ªë")
fig1, ax1 = plt.subplots(figsize=(10, 5))
sns.histplot(df['sales'], bins=30, kde=True, color='skyblue', ax=ax1)
ax1.set_title('Ph√¢n ph·ªëi doanh s·ªë')
ax1.set_xlabel('Doanh s·ªë')
ax1.set_ylabel('T·∫ßn su·∫•t')
st.pyplot(fig1)

with st.expander("üìä Ph√¢n t√≠ch"):
    st.markdown("- Doanh s·ªë ph√¢n b·ªë l·ªách ph·∫£i, cho th·∫•y ph·∫ßn l·ªõn c√°c giao d·ªãch c√≥ gi√° tr·ªã doanh s·ªë th·∫•p.")

# 2. Top 10 s·∫£n ph·∫©m b√°n ch·∫°y
st.subheader("2. Top 10 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t")
top_products = df.groupby('product_id')['sales'].sum().sort_values(ascending=False).head(10)
fig2, ax2 = plt.subplots(figsize=(10, 5))
sns.barplot(x=top_products.values, y=top_products.index, palette='viridis', ax=ax2)
ax2.set_title('Top 10 s·∫£n ph·∫©m b√°n ch·∫°y')
ax2.set_xlabel('T·ªïng doanh s·ªë')
ax2.set_ylabel('M√£ s·∫£n ph·∫©m')
st.pyplot(fig2)

with st.expander("üìä Ph√¢n t√≠ch"):
    st.markdown("- M·ªôt s·ªë s·∫£n ph·∫©m c√≥ doanh s·ªë v∆∞·ª£t tr·ªôi r√µ r·ªát, ph·∫£n √°nh ƒë·ªô ph·ªï bi·∫øn ho·∫∑c hi·ªáu qu·∫£ marketing.")

# 3. ·∫¢nh h∆∞·ªüng c·ªßa Promotion ƒë·∫øn Sales
st.subheader("3. Doanh s·ªë theo ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i")
fig3, ax3 = plt.subplots(figsize=(10, 5))
sns.boxplot(x='promotion', y='sales', data=df, palette='Set2', ax=ax3)
ax3.set_title('Doanh s·ªë theo khuy·∫øn m√£i')
ax3.set_xlabel('Khuy·∫øn m√£i')
ax3.set_ylabel('Doanh s·ªë')
st.pyplot(fig3)

with st.expander("üìä Ph√¢n t√≠ch"):
    st.markdown("- Nh√¨n chung, c√°c ƒë∆°n h√†ng c√≥ khuy·∫øn m√£i c√≥ xu h∆∞·ªõng ƒë·∫°t doanh s·ªë cao h∆°n.")

# 4. ·∫¢nh h∆∞·ªüng c·ªßa Holiday ƒë·∫øn Sales
st.subheader("4. Doanh s·ªë theo ng√†y l·ªÖ")
fig4, ax4 = plt.subplots(figsize=(10, 5))
sns.boxplot(x='holiday', y='sales', data=df, palette='coolwarm', ax=ax4)
ax4.set_title('Doanh s·ªë theo ng√†y l·ªÖ')
ax4.set_xlabel('Ng√†y l·ªÖ')
ax4.set_ylabel('Doanh s·ªë')
st.pyplot(fig4)

with st.expander("üìä Ph√¢n t√≠ch"):
    st.markdown("- C√≥ s·ª± kh√°c bi·ªát nh·∫π v·ªÅ doanh s·ªë gi·ªØa ng√†y l·ªÖ v√† ng√†y th∆∞·ªùng, t√πy thu·ªôc v√†o h√†nh vi ti√™u d√πng.")

# 5. Xu h∆∞·ªõng doanh s·ªë theo tu·∫ßn
st.subheader("5. Xu h∆∞·ªõng doanh s·ªë theo tu·∫ßn")
fig5, ax5 = plt.subplots(figsize=(10, 5))
sns.lineplot(data=df, x='week', y='sales', color='green', ax=ax5)
ax5.set_title('Xu h∆∞·ªõng doanh s·ªë theo tu·∫ßn')
ax5.set_xlabel('Tu·∫ßn')
ax5.set_ylabel('Doanh s·ªë')
ax5.grid(True)
st.pyplot(fig5)

with st.expander("üìä Ph√¢n t√≠ch"):
    st.markdown(
        "- Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng cho th·∫•y xu h∆∞·ªõng doanh s·ªë theo th·ªùi gian (tu·∫ßn).\n"
        "- C√≥ th·ªÉ th·∫•y c√°c tu·∫ßn c√≥ m·ª©c tƒÉng gi·∫£m kh√°c nhau, ph·∫£n √°nh ·∫£nh h∆∞·ªüng c·ªßa c√°c chi·∫øn d·ªãch marketing, ng√†y l·ªÖ ho·∫∑c s·ª± bi·∫øn ƒë·ªông nhu c·∫ßu."
    )

# ===========================
# ü§ñ D·ª± b√°o doanh s·ªë ƒë∆°n gi·∫£n
# ===========================
st.header("ü§ñ D·ª± b√°o doanh s·ªë v·ªõi Linear Regression")

# Chu·∫©n b·ªã d·ªØ li·ªáu
features = ['week', 'promotion', 'holiday']
X = df[features]
y = df['sales']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Hi·ªÉn th·ªã k·∫øt qu·∫£
st.subheader("Hi·ªáu su·∫•t m√¥ h√¨nh")
st.write(f"R¬≤ Score: {r2_score(y_test, y_pred):.2f}")
st.write(f"RMSE: {mean_squared_error(y_test, y_pred, squared=False):.2f}")

# Bi·ªÉu ƒë·ªì so s√°nh d·ª± b√°o
st.subheader("So s√°nh gi√° tr·ªã th·ª±c t·∫ø v√† d·ª± b√°o")
fig6, ax6 = plt.subplots(figsize=(10, 5))
ax6.plot(y_test.values[:50], label='Th·ª±c t·∫ø')
ax6.plot(y_pred[:50], label='D·ª± b√°o')
ax6.set_title('So s√°nh doanh s·ªë th·ª±c t·∫ø v√† d·ª± b√°o')
ax6.set_xlabel('ƒê∆°n h√†ng')
ax6.set_ylabel('Doanh s·ªë')
ax6.legend()
st.pyplot(fig6)

with st.expander("üìä Nh·∫≠n x√©t"):
    st.markdown("- M√¥ h√¨nh h·ªìi quy tuy·∫øn t√≠nh c√≥ th·ªÉ m√¥ ph·ªèng xu h∆∞·ªõng nh∆∞ng ch∆∞a ho√†n to√†n ch√≠nh x√°c v·ªõi d·ªØ li·ªáu hi·ªán t·∫°i.")
