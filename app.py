import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

# Title
st.title("D·ª± ƒëo√°n Doanh s·ªë B√°n h√†ng c·ªßa Si√™u th·ªã")

# Upload data
uploaded_file = st.file_uploader("üìÅ T·∫£i l√™n file d·ªØ li·ªáu CSV", type="csv")

if uploaded_file:
    df = pd.read_csv(uploaded_file)

    st.subheader("1Ô∏è‚É£ T·ªïng quan D·ªØ li·ªáu")
    st.write("**K√≠ch th∆∞·ªõc:**", df.shape)
    st.write("**Th√¥ng tin:**")
    st.dataframe(df.head())

    # Show column types
    buffer = []
    df.info(buf=buffer)
    s = "\n".join(map(str, buffer))
    st.text(s)

    st.subheader("2Ô∏è‚É£ Ti·ªÅn x·ª≠ l√Ω D·ªØ li·ªáu")

    # Ki·ªÉm tra gi√° tr·ªã null
    st.write("**S·ªë l∆∞·ª£ng gi√° tr·ªã thi·∫øu theo c·ªôt:**")
    st.write(df.isnull().sum())

    # Xo√° h√†ng thi·∫øu d·ªØ li·ªáu
    df = df.dropna()

    # Ki·ªÉm tra v√† lo·∫°i b·ªè b·∫£n ghi tr√πng
    df = df.drop_duplicates()

    # Hi·ªÉn th·ªã l·∫°i sau x·ª≠ l√Ω
    st.write("**Sau khi x·ª≠ l√Ω:**")
    st.dataframe(df.head())

    st.subheader("3Ô∏è‚É£ Tr·ª±c quan h√≥a d·ªØ li·ªáu")

    # Bi·ªÉu ƒë·ªì doanh s·ªë theo tu·∫ßn
    if 'week' in df.columns and 'sales' in df.columns:
        fig1 = px.line(df, x='week', y='sales', title='Doanh s·ªë theo Tu·∫ßn')
        st.plotly_chart(fig1)

    # Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi doanh s·ªë
    fig2, ax = plt.subplots()
    sns.histplot(df['sales'], bins=30, kde=True, ax=ax)
    ax.set_title("Ph√¢n ph·ªëi Doanh s·ªë")
    st.pyplot(fig2)

    # Boxplot doanh s·ªë theo khuy·∫øn m√£i (n·∫øu c√≥)
    if 'promotion' in df.columns:
        fig3, ax = plt.subplots()
        sns.boxplot(x='promotion', y='sales', data=df, ax=ax)
        ax.set_title("Doanh s·ªë theo Khuy·∫øn m√£i")
        st.pyplot(fig3)

    # Bi·ªÉu ƒë·ªì heatmap t∆∞∆°ng quan
    fig4, ax = plt.subplots()
    sns.heatmap(df.corr(numeric_only=True), annot=True, cmap="coolwarm", ax=ax)
    ax.set_title("Ma tr·∫≠n T∆∞∆°ng quan")
    st.pyplot(fig4)

    st.subheader("4Ô∏è‚É£ Hu·∫•n luy·ªán M√¥ h√¨nh D·ª± b√°o")

    # Ch·ªçn ƒë·∫∑c tr∆∞ng v√† nh√£n
    features = ['week', 'product_id', 'promotion', 'holiday']
    target = 'sales'

    if all(col in df.columns for col in features):
        X = df[features]
        y = df[target]

        # One-hot encoding n·∫øu c·∫ßn
        X = pd.get_dummies(X, drop_first=True)

        # Chia t·∫≠p train/test
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # Hu·∫•n luy·ªán m√¥ h√¨nh
        model = LinearRegression()
        model.fit(X_train, y_train)

        # D·ª± ƒëo√°n
        y_pred = model.predict(X_test)

        st.success("‚úÖ M√¥ h√¨nh ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán!")

        st.subheader("5Ô∏è‚É£ ƒê√°nh gi√° M√¥ h√¨nh")

        mse = mean_squared_error(y_test, y_pred)
        rmse = np.sqrt(mse)
        mae = mean_absolute_error(y_test, y_pred)
        r2 = r2_score(y_test, y_pred)

        st.write(f"**RMSE:** {rmse:.2f}")
        st.write(f"**MAE:** {mae:.2f}")
        st.write(f"**R¬≤:** {r2:.2f}")

        st.subheader("6Ô∏è‚É£ So s√°nh K·∫øt qu·∫£")

        fig5, ax = plt.subplots(figsize=(10, 5))
        ax.plot(y_test.values[:30], label='Th·ª±c t·∫ø', marker='o')
        ax.plot(y_pred[:30], label='D·ª± ƒëo√°n', marker='x')
        ax.set_title("So s√°nh Doanh s·ªë Th·ª±c t·∫ø vs D·ª± ƒëo√°n (30 m·∫´u ƒë·∫ßu)")
        ax.set_xlabel("Ch·ªâ s·ªë m·∫´u")
        ax.set_ylabel("Sales")
        ax.legend()
        ax.grid(True)
        st.pyplot(fig5)

        st.subheader("7Ô∏è‚É£ Ph√¢n ph·ªëi Sai s·ªë")

        errors = y_test - y_pred
        fig6, ax = plt.subplots(figsize=(10, 4))
        sns.histplot(errors, bins=30, kde=True, ax=ax)
        ax.set_title("Ph√¢n ph·ªëi Sai s·ªë D·ª± ƒëo√°n")
        ax.set_xlabel("Sai s·ªë")
        ax.set_ylabel("T·∫ßn su·∫•t")
        ax.grid(True)
        st.pyplot(fig6)
    else:
        st.warning("‚ö†Ô∏è Thi·∫øu m·ªôt s·ªë c·ªôt c·∫ßn thi·∫øt: 'week', 'product_id', 'promotion', 'holiday'")
