import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

st.set_page_config(layout="wide")
st.title("üìä D·ª± ƒëo√°n Doanh s·ªë B√°n h√†ng v·ªõi Linear Regression")

# Load data
@st.cache_data
def load_data():
    return pd.read_csv('data/sales_data.csv')

df = load_data()
st.subheader("1Ô∏è‚É£ T·ªïng quan d·ªØ li·ªáu")
st.write("Shape:", df.shape)
st.dataframe(df.head())

# Info
with st.expander("üìå Th√¥ng tin DataFrame"):
    buffer = []
    df.info(buf=buffer)
    info_str = "\n".join(buffer)
    st.text(info_str)

# Describe
with st.expander("üìå Th·ªëng k√™ m√¥ t·∫£"):
    st.dataframe(df.describe())

# Top 10 products
st.subheader("2Ô∏è‚É£ Top 10 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t")
top_products = df.groupby('product_id')['sales'].sum().sort_values(ascending=False).head(10)

fig1, ax1 = plt.subplots()
sns.barplot(x=top_products.index.astype(str), y=top_products.values, palette='viridis', ax=ax1)
ax1.set_title('Top 10 s·∫£n ph·∫©m b√°n ch·∫°y nh·∫•t')
ax1.set_xlabel('Product ID')
ax1.set_ylabel('T·ªïng Sales')
st.pyplot(fig1)

# Boxplot: promotion
st.subheader("3Ô∏è‚É£ ·∫¢nh h∆∞·ªüng c·ªßa Promotion ƒë·∫øn Sales")
fig2, ax2 = plt.subplots()
sns.boxplot(x='promotion', y='sales', data=df, ax=ax2)
ax2.set_title('·∫¢nh h∆∞·ªüng c·ªßa Promotion ƒë·∫øn Sales')
ax2.set_xlabel('Promotion (0 = kh√¥ng, 1 = c√≥)')
ax2.set_ylabel('Sales')
st.pyplot(fig2)

# Boxplot: holiday
st.subheader("4Ô∏è‚É£ ·∫¢nh h∆∞·ªüng c·ªßa Holiday ƒë·∫øn Sales")
fig3, ax3 = plt.subplots()
sns.boxplot(x='holiday', y='sales', data=df, ax=ax3)
ax3.set_title('·∫¢nh h∆∞·ªüng c·ªßa Holiday ƒë·∫øn Sales')
ax3.set_xlabel('Holiday (0 = kh√¥ng, 1 = c√≥)')
ax3.set_ylabel('Sales')
st.pyplot(fig3)

# Encode
st.subheader("5Ô∏è‚É£ Ti·ªÅn x·ª≠ l√Ω d·ªØ li·ªáu & One-Hot Encoding")
df_encoded = pd.get_dummies(df, columns=['region', 'category', 'product_id'], drop_first=True)
st.write("‚úÖ D·ªØ li·ªáu sau khi encode:")
st.dataframe(df_encoded.head())

# Train/test split
X = df_encoded.drop(['sales', 'week'], axis=1)
y = df_encoded['sales']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

# Evaluation
st.subheader("6Ô∏è‚É£ ƒê√°nh gi√° m√¥ h√¨nh Linear Regression")
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

col1, col2, col3, col4 = st.columns(4)
col1.metric("MAE", f"{mae:.2f}")
col2.metric("MSE", f"{mse:.2f}")
col3.metric("RMSE", f"{rmse:.2f}")
col4.metric("R¬≤", f"{r2:.2f}")

# Plot: actual vs predicted
st.subheader("7Ô∏è‚É£ So s√°nh Doanh s·ªë Th·ª±c t·∫ø vs D·ª± ƒëo√°n (30 m·∫´u ƒë·∫ßu)")
fig4, ax4 = plt.subplots()
ax4.plot(y_test.values[:30], label='Th·ª±c t·∫ø', marker='o')
ax4.plot(y_pred[:30], label='D·ª± ƒëo√°n', marker='x')
ax4.set_title("Th·ª±c t·∫ø vs D·ª± ƒëo√°n")
ax4.set_xlabel("Ch·ªâ s·ªë m·∫´u")
ax4.set_ylabel("Sales")
ax4.legend()
ax4.grid(True)
st.pyplot(fig4)

# Plot: error distribution
st.subheader("8Ô∏è‚É£ Ph√¢n ph·ªëi sai s·ªë d·ª± ƒëo√°n")
errors = y_test - y_pred
fig5, ax5 = plt.subplots()
sns.histplot(errors, bins=30, kde=True, ax=ax5)
ax5.set_title("Ph√¢n ph·ªëi sai s·ªë")
ax5.set_xlabel("Sai s·ªë")
ax5.set_ylabel("T·∫ßn su·∫•t")
st.pyplot(fig5)
